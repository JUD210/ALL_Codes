=== Conversion During Assignment
ã…‡ The usual arithmetic conversions don't apply to assignment. Instead, C follows the simple rule that the expression on the right side of the assignment is converted to the type of the variable on the left side. If the variable's type is at least as "wide" as the expression's, this will work without a snag.

For example:

char c;
int i;
float f;
double d;
i : c;  /* c is converted to int */
f = i;  /* i is converted to float */
d = f;  /* f is converted to double */


Other cases are problematic. Assigning a floating-point number to an integer
variable drops the fractional part of the number:

int i;
i = 842.97;   /* i is now 842 */
i = -842.97;  /* i is now -842 */


Moreover, assigning a value to a variable of a narrower type will give a meaningless result (or worse) if the value is outside the range of the variable's type:

c = 10000;    /*** WRONG ***/
i = 1.0e20;   /*** WRONG ***/
f = 1.0e100;  /*** WRONG ***/

A "narrowing" assignment may elicit a warning from the compiler or from tools
such as lint.


It's a good idea to append the f suffix to a floating-point constant if it will be assigned to a float variable, as we've been doing since Chapter 2:

f = 3.14159f;

Without the suffix, the constant 3.14159 would have type double, possibly
causing a warning message.
