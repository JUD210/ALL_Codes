=== Array Subscripting
ㅇ To access a particular element of an array, we write the array name followed by an integer value in square brackets (this is referred to as subscripting or indexing the array).

ㅇ Array elements are always numbered starting from 0, so the elements of an array of length n are indexed from 0 to n-1. For example, if a is an array with 10 elements, they're designated by a[0], a[1], ..., a[9], as the following figure shows:

Array Subscripting (Indexing).png


ㅇ Expressions of the form a[i] are lvalues, so they can be used in the same way as ordinary variables:

a[0] = 1;
printf("%d\n", a[5]);
++a[i] ;

In general, if an array contains elements of type T, then each element of the array is treated as if it were a variable of type T.

In this example, the elements a[0], a[5], and a[i] behave like int variables.


ㅇ Arrays and for loops go hand-in-hand. Many programs contain for loops whose job is to perform some operation on every element in an array. Here are a few examples of typical operations on an array a of length N:

for (i = 0; 1 < N; i++)
  a[i] = 0;            /* clears a */

for (i = 0; i < N; i++)
  scanf("%d", &a[i]);  /* reads data into a */

for (i = 0; i < N; i++)
  sum += a[i];         /* sums the elements of a */

Notice that we must use the & symbol when calling scanf to read an array element, just as we would with an ordinary variable.


ㅇ An array subscript may be any integer expression:

a[i+j*10] = 0;

The expression can even have side effects:
i = 0;
while (i < N)
  a[i++] = 0;

Let's trace this code. After i is set to 0, the while statement checks whether i is less than N. If it is, 0 is assigned to a[0], i is incremented, and the loop repeats.

Note that a [++i] wouldn't be right, because 0 would be assigned to a[1] during
the first loop iteration.
