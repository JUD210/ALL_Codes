On occasion, we might like to write a for statement with two (or more) initialization expressions or one that increments several variables each time through the loop.

We can do this by using a comma expression as the f‌irst or third expression in the for statement.

A comma expression has the form

expr1 , expr2

where expr1 and expr2 are any two expressions. A comma expression is evaluated
in two steps:

First, expr1 is evaluated and its value discarded.
Second, expr2 is evaluated; its value is the value of the entire expression. Evaluating expr1 should always have a side effect; if it doesn't, then expr1 serves no purpose.

For example, suppose that i and j have the values 1 and 5, respectively. When the comma expression ++i , i + j is evaluated, 1 is f‌irst incremented, then i + j is evaluated, so the value of the expression is 7. (And, of course, i now has the value 2.)

The precedence of the comma operator is less than that of all other operators, by the way, so there's no need to put parentheses around ++i and i + j.

Occasionally, we'll need to chain together a series of comma expressions, just as we sometimes chain assignments together. The comma operator is left associative. so the compiler interprets

i = 1, j = 2, k = i + j
as
((i = 1), (j = 2)), (k = (i + j))

---------

sum = 0;
for (i = 1; i <= n; i++)
  sum += i;

is the same as

for (sum = 0, i = 1; i <= n; i++)
  sum += i;
