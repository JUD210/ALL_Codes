Accidentally putting a semicolon after the parentheses in an if, while, or for statement creates a null statement, thus ending the if, while, or for prematurely.


In an if statement, putting a semicolon after the parentheses creates an if statement that apparently performs the same action regardless of the value of its controlling expression:

if (d == 0); /*** WRONG ***/
  printf ("Error: Division by zero\n");

The call of printf isn't inside the if statement, so it's performed regardless of whether d is equal to 0.


In a while statement, putting a semicolon after the parentheses may create an infâ€Œinite loop:

i = 10;
while (i > 0); /*** WRONG ***/
{
  printf("T minus %d and counting\n", i);
  --i;
}

Another possibility is that the loop terminates, but the statement that should be the loop body is executed only once, after the loop has terminated:

i = 11 ;
while (--i > 0); /*** WRONG ***/
  printf("T minus %d and counting\n", i);

This example prints the message
T minus 0 and counting


In a for statement, putting a semicolon after the parentheses causes the statement that should be the loop body to be executed only once:

for (i = 10; i > O; i--); /*** WRONG ***/
  printf ("T minus %d and counting\n", i);

This example also prints the message

T minus 0 and counting
