i = 2;
j = i * i++;

It’s natural to assume that j is assigned the value 4. However, the effect of executing the statement is undef‌ined, and j could just as well be assigned 6 instead.



According to the C standard, statements such as c = (b = a + 2) - (a = 1) ; and j = i * i++; cause undefined behavior, which is different from implementation-defined behavior. 

When a program ventures into the realm of undefined behavior, all bets are off. The program may behave differently when compiled with different compilers. But that's not the only thing that can happen. 

The program may not compile in the first place, if it compiles it may not run, and if it does run, it may crash, behave erratically, or produce meaningless results. In other words, undefined behavior should be avoided like the plague.