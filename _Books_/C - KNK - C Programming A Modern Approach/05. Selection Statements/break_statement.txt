Now, let‘s take a closer look at the mysterious break statement. As we’ve seen, executing a break statement causes the program to "break" out of the switch statement; execution continues at the next statement after the switch.

The reason that we need break has to do with the fact that the switch statement is really a form of "computed jump." When the controlling expression is evaluated, control jumps to the case label matching the value of the switch expression.

A case label is nothing more than a marker indicating a position within the switch. When the last statement in the case has been executed, control "falls through" to' the f‌irst statement in the following case; the case label for the next case is ignored.

Without break (or some other jump statement), control will flow from one case into the next. Consider the following switch statement:

switch (grade) {
  case 4: printf("Excellent");
  case 3: printfthood");
  case 2: printf("Average");
  case 1: printf("Poor");
  case 0: printflmFailing");
  default: printf("Illegal grade");
}

If the value of grade is 3, the message printed is

GoodAveragePoorFailinglllegal grade

Forgetting to use break is a common error. Although omitting break is sometimes done intentionally to allow several cases to share code, it‘s usually just an oversight.

Since deliberately falling through from one case into the next is rare, it’s a
good idea to point out any deliberate omission of break:

switch (grade) {
  case 4: case 3: case 2: case 1:
          num_passing++;
          /* FALL THROUGH */
  case 0: total_grades++;
          break;
}

Without the comment, someone might later f‌ix the "error" by adding an unwanted break statement.

Although the last case in a switch statement never needs a break statement, it’s common practice to put one there anyway to guard against a "missing break" problem if cases should later be added.