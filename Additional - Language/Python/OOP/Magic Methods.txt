https://rszalski.github.io/magicmethods/


    Construction and Initialization


__new__(cls, [...)
__new__ is the first method to get called in an object's instantiation. It takes the class, then any other arguments that it will pass along to __init__. __new__ is used fairly rarely, but it does have its purposes, particularly when subclassing an immutable type like a tuple or a string. I don't want to go in to too much detail on __new__ because it's not too useful, but it is covered in great detail in the Python docs.

__init__(self, [...)
The initializer for the class. It gets passed whatever the primary constructor was called with (so, for example, if we called x = SomeClass(10, 'foo'), __init__ would get passed 10 and 'foo' as arguments. __init__ is almost universally used in Python class definitions.


__del__(self)
If __new__ and __init__ formed the constructor of the object, __del__ is the destructor. It doesn't implement behavior for the statement del x (so that code would not translate to x.__del__()). Rather, it 
defines behavior for when an object is garbage collected. It can be quite 
useful for objects that might require extra cleanup upon deletion, like sockets or file objects. Be careful, however, as there is no guarantee that __del__ will be executed if the object is still alive when the interpreter exits, so __del__ can't serve as a replacement for good coding practices (like always closing a connection when you're done with it. In fact, __del__ should almost never be used because of the precarious circumstances under which it is called; use it with caution!
    
    
    Representing your Classes


__str__(self)
Defines behavior for when str() is called on an instance of your class.

__repr__(self)
Defines behavior for when repr() is called on an instance of your class. The major difference between str() and repr() is intended audience. repr() is intended to produce output that is mostly machine-readable (in many cases, it could be valid Python code even), whereas str() is intended to be human-readable.


__unicode__(self)
Defines behavior for when unicode() is called on an instance of your class. unicode() is like str(), but it returns a unicode string. Be wary: if a client calls str() on an instance of your class and you've only defined __unicode__(), it won't work. You should always try to define __str__() as well in case someone doesn't have the luxury of using unicode.

__format__(self, formatstr)
Defines behavior for when an instance of your class is used in new-style string formatting. For instance, "Hello, {0:abc}!".format(a) would lead to the call a.__format__("abc"). This can be useful for defining your own numerical or string types that you might like to give special formatting options.

__hash__(self)
Defines behavior for when hash() is called on an instance of your class. It has to return an integer, and its result is used for quick key comparison in dictionaries. Note that this usually entails implementing __eq__ as well. Live by the following rule: a == b implies hash(a) == hash(b).

__nonzero__(self)
Defines behavior for when bool() is called on an instance of your class. Should return True or False, depending on whether you would want to consider the instance to be True or False.

__dir__(self)
Defines behavior for when dir() is called on an instance of your class. This method should return a list of attributes for the user. Typically, implementing __dir__ is unnecessary, but it can be vitally important for interactive use of your classes if you redefine __getattr__ or __getattribute__ (which you will see in the next section) or are otherwise dynamically generating attributes.

__sizeof__(self)
Defines behavior for when sys.getsizeof() is called on an instance of your class. This should return the size of your object, in bytes. This is generally more useful for Python classes implemented in C extensions, but it helps to be aware of it.


    Comparison magic methods


__cmp__(self, other)

__cmp__ is the most basic of the comparison magic methods. It actually implements behavior for all of the comparison operators (<, ==, !=, etc.), but it might not do it the way you want (for example, if whether one instance was equal to another were determined by one criterion and and whether an instance is greater than another were determined by something else). __cmp__ should return a negative integer if self < other, zero if self == other, and positive if self > other. It's usually best to define each comparison you need rather than define them all at once, but __cmp__ can be a good way to save repetition and improve clarity when you need all comparisons implemented with similar criteria.

__eq__(self, other)
Defines behavior for the equality operator, ==.

__ne__(self, other)
Defines behavior for the inequality operator, !=.

__lt__(self, other)
Defines behavior for the less-than operator, <.

__gt__(self, other)
Defines behavior for the greater-than operator, >.

__le__(self, other)
Defines behavior for the less-than-or-equal-to operator, <=.

__ge__(self, other)
Defines behavior for the greater-than-or-equal-to operator, >=.


    Normal arithmetic operators


__add__(self, other)
Implements addition.

__sub__(self, other)
Implements subtraction.

__mul__(self, other)
Implements multiplication.

__floordiv__(self, other)
Implements integer division using the // operator.

__div__(self, other)
Implements division using the / operator.

__truediv__(self, other)
Implements true division. Note that this only works when from __future__ import ivision is in effect.

__mod__(self, other)
Implements modulo using the % operator.

__divmod__(self, other)
Implements behavior for long division using the divmod() built in function.

__pow__
Implements behavior for exponents using the ** operator.

__lshift__(self, other)
Implements left bitwise shift using the << operator.

__rshift__(self, other)
Implements right bitwise shift using the >> operator.

__and__(self, other)
Implements bitwise and using the & operator.

__or__(self, other)
Implements bitwise or using the | operator.

__xor__(self, other)
Implements bitwise xor using the ^ operator.


    Type conversion magic methods


__int__(self)
Implements type conversion to int.

__long__(self)
Implements type conversion to long.

__float__(self)
Implements type conversion to float.

__complex__(self)
Implements type conversion to complex.

__oct__(self)
Implements type conversion to octal.

__hex__(self)
Implements type conversion to hexadecimal.



    
    + Type Checking related

__annotations__

example)


import math

def circumference(radius: float) -> float:
    return 2 * math.pi * radius
When running the code, you can also inspect the annotations. They are stored in a special .__annotations__ attribute on the function:

>>> circumference(1.23)
7.728317927830891

>>> circumference.__annotations__
{'radius': <class 'float'>, 'return': <class 'float'>}
