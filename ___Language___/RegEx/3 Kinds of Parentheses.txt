https://unbounded.systems/blog/3-kinds-of-parentheses-are-you-a-regex-master/


===========================
# Literal Parentheses -> \(


(010)123-4567
↓
\(\d{3}\)\d{3}-\d{4}
↓
$0 : (010)123-4567
$1 : $1


===========================
# Capturing Parentheses -> (


(010)123-4567
↓
\((\d{3})\)\d{3}-\d{4}
↓
$0 : (010)123-4567
$1 : 010
$2 : $2

---------------------

can
↓
can('t)?()()
↓
$0 : can
$1 :
$2 :
$3 :
$4 : $4

---------------------

can't
↓
can('t)?()()
↓
$0 : can't
$1 : 't
$2 :
$3 :
$4 : $4

---------------------

We need the parentheses here because
can't?
would match only the strings can', and can't, not quite what we had in mind.


===========================
# Non-Capturing Parentheses -> (?:


To avoid capturing the ‘t, we write
can(?:'t)?

Here, all we get is the full match, with no sub-matches.

---------------------

The (?: is a special sequence that starts a parenthesized group, just like ( , but the regular expression engine is told, don't bother to capture the match in the group, just use it for operator precedence.

---------------------

(010)123-4567
↓
((mobile|office)/)?\((\d{3})\)\d{3}-\d{4}
↓
$0 : (010)123-4567
$1 :
$2 :
$3 : 010
$4 : $4

---------------------

mobile/(010)123-4567
↓
((mobile|office)/)?\((\d{3})\)\d{3}-\d{4}
↓
$0 : mobile/(010)123-4567
$1 : mobile/
$2 : mobile
$3 : 010
$4 : $4

---------------------

mobile/(010)123-4567
↓
((?:mobile|office)/)?\((\d{3})\)\d{3}-\d{4}
↓
$0 : mobile/(010)123-4567
$1 : mobile/
$2 : 010
$3 : $3

---------------------

mobile/(010)123-4567
↓
(?:(mobile|office)/)?\((\d{3})\)\d{3}-\d{4}
↓
$0 : mobile/(010)123-4567
$1 : mobile
$2 : 010
$3 : $3

---------------------

mobile/(010)123-4567 -> mobile/(010)123-4567 + 010 + $2 + $3 + $4
↓
(?:(?:mobile|office)/)?\((\d{3})\)\d{3}-\d{4}
↓
$0 : mobile/(010)123-4567
$1 : 010
$2 : $2
