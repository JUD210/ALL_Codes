This PATTERN    | Description

=== I know ===

abc 123         | Matches "abc 123"

[abc]           | Matches a character of: a, b, or c
[^abc]          | Matches a character except: a, b, nor c
[a-z]           | Matches a character of: the range(a-z)
[0-9]           | Matches a character of: the range(0-9)

[abx-z]	        | Matches a character of: a, b, or the range(x-z)
[^abx-z]	      | Matches a character except: a, b, or the range(x-z)

\d	            | Matches a digit character //same as [0-9]
\D	            | Matches a non-digit character //same as [^0-9]
\w              | Matches a word character //same as [_a-zA-Z0-9] , [^\W]
\W              | Matches a non-word character //same as [^_a-zA-Z0-9] , [^\w]

[^\W_]          | Same as Alphanumeric [a-zA-Z0-9]

\t              | Matches a tab
\n              | Matches a newline
\r              | Matches a carriage return //I don't know when to use this

\s              | Matches a whitespace character //includes [\t\n\r]
\S              | Matches a non-whitespace character

a{4}	          | Matches exactly 4 'a's
a{0,8}	        | Matches between(inclusive) zero and 8 'a's
a{9,}	          | Matches 9 or more 'a's

a?	            | Matches zero or one 'a' (greedy)
a*	            | Matches zero or more 'a's (greedy)
a+	            | Matches one or more 'a's (greedy)

a??	            | Matches zero or one 'a' (lazy)
a*?	            | Matches zero or more 'a's (lazy)
a+?	            | Matches one or more 'a's (lazy)

//greedy vs lazy
<.+>            | ex) <html><head><title>Title</title>
<.+?>           | ex) <html> , <head> , <title> , </title>

.               | Matches any non-newline character //same as [^\n]
.*              | Matches zero or more non-newline character //Matches all

\MetaCharacter  | Matches a metacharacter //( ) [ ] { } ? * + . | ^ $ \
4\.\d+ - 1 = \? | ex) 4.25 - 1 = ?  //'\' required to match '.' or '?'

abc|123         | Matches "abc" or "123"
(abc)           | Matches "abc", and captures the string into a numbered group
(?P<gr1>abc)    | Matches "abc", and captures the string into a group named "gr1"

(?:abc)	        | Matches "abc", and non-captures the string into a numbered group

(abc|123)       | Matches "abc" or "123", and captures the matched string into a numbered group
(abc|123)?      | Matches zero or one "abc" or "123", and captures one of it
abc|123?        | Matches "abc" or "12" or "123"

(abc(123))      | Matches "abc123", and captures "abc" in group 1, "123" in group 2
(.*)            | Matches all, and captures all

abc(?=123|456)  | Matches "abc" that is followed by "123" or "456" (A positive lookahead)
abc(?!123|456)  | Matches "abc" that is not followed by "123" or "456" (A negative lookahead)
(?<=123|456)abc | Matches "abc" that is preceded by "123" or "456" (A positive lookbehind)
(?<!123|456)abc | Matches "abc" that is not preceded by "123" or "456" (A negative lookbehind)
// lookbehind wouldn't be supported in some languages.


^abc            | Matches "abc" after line starting point
abc$            | Matches "abc" before line ending point
^abc$           | Matches "abc" after line starting point, and before line ending point

(?<!^)          | Don't match the start of line

//Back reference
\1	            | Backreference: The First captured group
(Abc)Z\1+       | Matches "AbcZAbc"
((Abc)Z\2)X(\1) | Matches "AbcZAbcXAbcZAbc"
(a?)o\1         | Matches 'o' or "aoa"
(a)?o\1         | Matches "aoa"


\b, \B (Word Boundaries)
: The metacharacter \b is an anchor like the caret and the dollar sign. It matches at a position that is called a "word boundary". This match is zero-length.

: There are three different positions that qualify as word boundaries:
- Before the first character in the string, if the first character is a word character.
- After the last character in the string, if the last character is a word character.
- Between two characters in the string, where one is a word character and the other is not a word character.

Simply put: \b allows you to perform a "whole words only" search using a regular expression in the form of \bword\b. A "word character" is a character that can be used to form words. All characters that are not "word characters" are "non-word characters".

Exactly which characters are word characters depends on the regex flavor you're working with. In most flavors, characters that are matched by the short-hand character class \w are the characters that are treated as word characters by word boundaries.


ex)

v 2.5.016: testing string

\b[\d.]+\b        | Matches '2.5.016'
\b[\d]+\b         | Matches '2', '5', '016'
\b[\d]+: t        | Matches '016: t'
\b[\d]+:\b        | Matches Nothing
\b[\d]+\b: t      | Matches '016: t'
(?<=\b)\d+(?=\:)  | Matches '016'


=== non-Python ===

VS Code uses JavaScript's regular expressions as specified in ECMAScript 5, which doesn't support look behinds (https://github.com/Microsoft/vscode/issues/8635).

$0              | (in Replace): Write(!=Match) all of the matched string
$1              | (in Replace): Write(!=Match) the first captured group


=== I don't know ===


(?P<n>...)	    | A capturing group named n

\cY	            | The control character with the hex code Y
\xYY	          | The character with the hex code YY
\uYYYY	        | The character with the hex code YYYY

(?P=n)	        | The captured group named 'n'
(?#...)	        | A comment



############################################################

### My backreference problem ###


    Task

Full Match Below List,

ABC ABC ABC ABC
1234 1234
1234 1234 1234 1234
1234 1234 1234 1234 1234 1234

and Never Match Below List

ABC DEF GHI 425
1234
1234 1234 1234
1234 1234 1234 1234 1234


    Answer

^((.*?)\s)\2$


    Description

\1 and \2 divides half of whole match...
but how does it work?

I don't know.

Maybe I should question later.
