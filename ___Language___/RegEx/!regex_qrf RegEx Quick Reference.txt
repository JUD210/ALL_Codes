This PATTERN    | MATCHES (+Description)

=== I know ===

abc 123         | "abc 123"

[abc]           | A character of: a, b, or c
[^abc]          | A character except: a, b, nor c
[a-z]           | A character of: the range(a-z)
[0-9]           | A character of: the range(0-9)

[abx-z]	        | A character of: a, b, or the range(x-z)
[^abx-z]	    | A character except: a, b, or the range(x-z)

\d	            | A character digit character (same as [0-9])
\D	            | A non-digit character (same as [^0-9])
\w              | A word character (same as [_a-zA-Z0-9] , [^\W])
\W              | A non-word character (same as [^_a-zA-Z0-9] , [^\w])

[^\W_]          | Same as Alphanumeric [a-zA-Z0-9]

\s              | A whitespace character (including a Tab)
\S              | A non-whitespace character

\t              | A Tab
\n              | A Newline


a{4}	        | Exactly 4 a'ss
a{0,8}	        | Between (inclusive) zero and 8 a's
a{9,}	        | 9 or more a's

a{3}{1,2}       | == a{3} or a{6}

a?	            | Zero or one a (greedy)
a*	            | Zero or more a's (greedy)
a+	            | A or more a's (greedy)

a??	            | Zero or one a (lazy)
a*?	            | Zero or more a's (lazy)
a+?	            | A or more a's (lazy)

<.*>            | ex) <html><head><title>Title</title>
<.*?>           | ex) <html> , <head> , <title> , </title>

.               | Any one character (== \d?\D? , \w?\W? , \s?\S?)
.*              | All
\MetaCharacter  | A metacharacter
\+4\.25 ...     | ex) "+4.25 a.b"


abc|123         | abc or 123
(abc)           | abc, and Capture string in group
(?P<name>abc)   | abc, and Capture string in group: name

(?:abc)	        | abc, and Non-capture string in group

(abc|123)       | abc or 123, and Capture one of it
(abc|123)?      | Zero or one "abc" or "123", and Capture one of it  (Null:" ")
abc|123?        | "abc" or "12" + Zero or one "3"

(abc(123))      | abc123, Capture "abc" in group 1, "123" in group 2
(.*)            | All, Capture all

abc(?=123|456)  | abc that is followed by 123 or 456 (A positive lookahead)
abc(?!123|456)  | abc that is not followed by 123 or 456 (A negative lookahead)
(?<=123|456)abc | abc that is preceded by 123 or 456 (A positive lookbehind)
(?<!123|456)abc | abc that is not preceded by 123 or 456 (A negative lookbehind)

# lookbehind wouldn't be supported by some languages.


^abc            | Line starts before abc
123$            | Line ends after 123
^123$           | Line starts before abc, and ends after 123

(?<!^)          | Don't match the start of line

\1	            | Backreference: The First captured group
(\w)\1+         | A word character that is repeated more than 2 times.
(\w)(\1)(\2)    | A word character that is repeated exactly 3 times.


ex)

o

(a?)o\1           | Matches 'o'
(a)?o\1           | Fails to match 'o' (excluding JavaScript)



\b, \B (Word Boundaries)
: The metacharacter \b is an anchor like the caret and the dollar sign. It matches at a position that is called a "word boundary". This match is zero-length.

: There are three different positions that qualify as word boundaries:
- Before the first character in the string, if the first character is a word character.
- After the last character in the string, if the last character is a word character.
- Between two characters in the string, where one is a word character and the other is not a word character.

Simply put: \b allows you to perform a "whole words only" search using a regular expression in the form of \bword\b. A "word character" is a character that can be used to form words. All characters that are not "word characters" are "non-word characters".

Exactly which characters are word characters depends on the regex flavor you're working with. In most flavors, characters that are matched by the short-hand character class \w are the characters that are treated as word characters by word boundaries.


ex)

v 2.5.016: Test

\b[\d.]+\b        | Matches '2.5.016'
\b[\d]+\b         | Matches '2', '5', '016'
\b[\d]+:          | Matches '016:'
\b[\d]+:\b        | Not Matches
\b[\d]+\b:        | Matches '016:'
(?<=\b)\d+(?=\:)  | Matches '016'


=== Non-Python ===

VS Code uses JavaScript's regular expressions as specified in ECMAScript 5, which doesn't support look behinds (https://github.com/Microsoft/vscode/issues/8635).

$0              | (in Replace): Write(!=Match) the string
$1              | (in Replace): Write(!=Match) the first captured group


=== I don't know ===


(?P<n>...)	    | A capturing group named n

\cY	            | The control character with the hex code Y
\xYY	        | The character with the hex code YY
\uYYYY	        | The character with the hex code YYYY

(?P=n)	        | The captured group named 'n'
(?#...)	        | A comment



############################################################

### My back reference problem ###


    Task

Full Match Below List,

ABC ABC ABC ABC
1234 1234
1234 1234 1234 1234
1234 1234 1234 1234 1234 1234

and Never Match Below List

ABC DEF GHI 425
1234
1234 1234 1234
1234 1234 1234 1234 1234


    Answer

^((.*?)\s)\2$


    Description

\1 and \2 divides half of whole match...
but how does it work?

I don't know.

Maybe I should question later.
